'use client';
import Link from "next/link";
import { Rocket, Database, BarChart2, MailCheck, Workflow, AlertTriangle, Zap, ArrowDown, FileText, Settings, Video, LifeBuoy, BookOpen, MessageCircle, UserCheck, Check } from "lucide-react";
import { motion } from "framer-motion";
import 'swiper/css';
import 'swiper/css/effect-coverflow';
import 'swiper/css/navigation';
import { Swiper, SwiperSlide } from 'swiper/react';
import { EffectCoverflow, Navigation, Pagination, Autoplay } from 'swiper/modules';
import { useState, useRef } from 'react';
import FuturisticOrderModal from './FuturisticOrderModal';
import React from 'react';
import { useTranslations } from 'next-intl';

const services = [
  {
    icon: <Rocket size={36} className="text-[#a259f7]" />,
    title: "AI-Powered Lead Generation",
    desc: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ª–∏–¥–æ–≤ —Å AI, —á—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ.",
  },
  {
    icon: <Database size={36} className="text-[#4fc3f7]" />,
    title: "Seamless Data Sync",
    desc: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –¥—É–±–ª–µ–π.",
  },
  {
    icon: <BarChart2 size={36} className="text-[#a259f7]" />,
    title: "Automated Reporting",
    desc: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã –ø–æ –≤–∞—à–∏–º KPI –±–µ–∑ —Ä—É—á–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.",
  },
  {
    icon: <MailCheck size={36} className="text-[#4fc3f7]" />,
    title: "AI Email Triage",
    desc: "AI —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ e-mail, —ç–∫–æ–Ω–æ–º—è –≤–∞–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã.",
  },
  {
    icon: <Workflow size={36} className="text-[#a259f7]" />,
    title: "Workflow Orchestration",
    desc: "–ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ —á–µ—Ä–µ–∑ n8n + AI.",
  },
];

const cinematicServices = [
  {
    title: "AI Lead Generation",
    desc: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ª–∏–¥–æ–≤ —Å AI, —á—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ.",
    icon: <Rocket size={48} className="text-[#a259f7]" />,
    video: "/videos/demo1.mp4",
  },
  {
    title: "Data Sync Automation",
    desc: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –¥—É–±–ª–µ–π.",
    icon: <Database size={48} className="text-[#4fc3f7]" />,
    video: "/videos/demo2.mp4",
  },
  {
    title: "AI Email Triage",
    desc: "AI —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ e-mail, —ç–∫–æ–Ω–æ–º—è –≤–∞–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã.",
    icon: <MailCheck size={48} className="text-[#a259f7]" />,
    video: "/videos/demo3.mp4",
  },
];

const aiLabServices = [
  {
    title: "AI Lead Generation",
    desc: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ª–∏–¥–æ–≤ —Å AI, —á—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ.",
    icon: <Rocket size={28} className="text-[#a259f7]" />,
    youtubeId: "ysz5S6PUM-U",
  },
  {
    title: "Data Sync Automation",
    desc: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –¥—É–±–ª–µ–π.",
    icon: <Database size={28} className="text-[#4fc3f7]" />,
    youtubeId: "dQw4w9WgXcQ",
  },
  {
    title: "Automated Reporting",
    desc: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã –ø–æ –≤–∞—à–∏–º KPI –±–µ–∑ —Ä—É—á–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.",
    icon: <BarChart2 size={28} className="text-[#a259f7]" />,
    youtubeId: "tgbNymZ7vqY",
  },
  {
    title: "AI Email Triage",
    desc: "AI —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ e-mail, —ç–∫–æ–Ω–æ–º—è –≤–∞–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã.",
    icon: <MailCheck size={28} className="text-[#4fc3f7]" />,
    youtubeId: "hY7m5jjJ9mM",
  },
  {
    title: "Workflow Orchestration",
    desc: "–ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ —á–µ—Ä–µ–∑ n8n + AI.",
    icon: <Workflow size={28} className="text-[#a259f7]" />,
    youtubeId: "e-ORhEE9VVg",
  },
];

const stories = [
  {
    problem: "E-commerce –±–∏–∑–Ω–µ—Å—ã —Ç—Ä–∞—Ç—è—Ç –∫—É—á—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –ù–µ—Ç –ø–∞–º—è—Ç–∏ –≤ —á–∞—Ç–∞—Ö, –∑–∞–∫–∞–∑—ã —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é.",
    solutionVideo: "https://www.youtube.com/embed/B2wIj_Fawwg?autoplay=1&mute=1&controls=0&loop=1&playlist=B2wIj_Fawwg",
    solutionText: `–°–æ–∑–¥–∞–ª AI e-commerce –∞–≥–µ–Ω—Ç–∞:\n\n‚úÖ –û–±—â–∞–µ—Ç—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∫–∞–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (–ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–∞–ª–∏—á–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞)\n‚úÖ –ü–æ–º–Ω–∏—Ç –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É (memory)\n‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑—ã –∏ –ª–æ–≥–∏ –≤ Supabase\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\nüîß –°—Ç–µ–∫: n8n + GPT + Supabase + Telegram Bot`,
    result: "–ê–≤—Ç–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ —É—á–∞—Å—Ç–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏–π.",
    resultDesc: "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–∫–∞–∑ —Å 5 –º–∏–Ω—É—Ç –¥–æ 20 —Å–µ–∫—É–Ω–¥."
  },
  {
    problem: "–†–∏–µ–ª—Ç–æ—Ä—ã —Ç–µ—Ä—è—é—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑-–∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤ —Å —Å–∞–π—Ç–∞. –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –æ—à–∏–±–∫–∞–º–∏, –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –±–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
    solutionVideo: "https://www.youtube.com/embed/yIpIyUOA7IU?autoplay=1&mute=1&controls=0&loop=1&playlist=yIpIyUOA7IU",
    solutionText: `–°–¥–µ–ª–∞–ª Real Estate Lead Automation:\n\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã (–≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email)\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö\n‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ –≤ Telegram c –∫–Ω–æ–ø–∫–æ–π \"–ü–æ–∑–≤–æ–Ω–∏—Ç—å\"\n‚úÖ –í—Å—ë —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ n8n workflow + Telegram Bot API`,
    result: "–õ–∏–¥—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞ 1-2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã. –†–∏–µ–ª—Ç–æ—Ä—ã —Å—Ä–∞–∑—É –∑–≤–æ–Ω—è—Ç –∫–ª–∏–µ–Ω—Ç—É –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–∏.",
    resultDesc: "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –±–µ–∑ –Ω–∞–π–º–∞ –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."
  },
  {
    problem: "–ú–Ω–æ–≥–∏–µ –±–∏–∑–Ω–µ—Å—ã —Ç–µ—Ä—è—é—Ç –∑–∞—è–≤–∫–∏ –∏–∑-–∑–∞ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ª–∏–¥–æ–≤ –∏–∑ —Ñ–æ—Ä–º –≤ CRM. –î–∞–Ω–Ω—ã–µ —Ç–µ—Ä—è—é—Ç—Å—è, –Ω–µ—Ç –±—ã—Å—Ç—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
    solutionVideo: "https://www.youtube.com/embed/H8gNPQpl5nU?autoplay=1&mute=1&controls=0&loop=1&playlist=H8gNPQpl5nU",
    solutionText: `–°–¥–µ–ª–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é:\n\n‚úÖ –õ–∏–¥ –∏–∑ —Ñ–æ—Ä–º—ã –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n‚úÖ AI –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ Trello CRM —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏ follow-up –∑–∞–¥–∞—á–∞–º–∏\n‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\nüîß –°—Ç–µ–∫: n8n workflow + Webhook + Trello API + Email automation`,
    result: "–õ–∏–¥—ã —Å—Ä–∞–∑—É –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ Trello —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –ù–æ–ª—å —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
    resultDesc: "–ë–∏–∑–Ω–µ—Å —É—Å–ø–µ–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫–∏ –±—ã—Å—Ç—Ä–µ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤."
  },
  {
    problem: "–¢—Ä–µ–π–¥–µ—Ä—ã –∏ –∫—Ä–∏–ø—Ç–æ-–∫–æ–º–∞–Ω–¥—ã —Ç—Ä–∞—Ç—è—Ç —á–∞—Å—ã –Ω–∞ —á—Ç–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–æ–∫ –¥–ª—è Telegram.",
    solutionVideo: "https://www.youtube.com/embed/mX1zyFAeCOk?autoplay=1&mute=1&controls=0&loop=1&playlist=mX1zyFAeCOk",
    solutionText: "–°–¥–µ–ª–∞–ª AI-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –Ω–∞ –±–∞–∑–µ CryptoPanic News Analyzer: –∫–∞–∂–¥—ã–π —á–∞—Å –±–µ—Ä—ë—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å CryptoPanic, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–µ—Ä–µ–∑ GPT (sentiment, –ø—Ä–æ–≥–Ω–æ–∑, –∏–Ω—Å–∞–π—Ç—ã), –≥–µ–Ω–µ—Ä–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π digest –≤ Telegram —á–µ—Ä–µ–∑ n8n.",
    result: "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π Crypto Digest –∫–∞–∂–¥—ã–π —á–∞—Å. –í–∫–ª—é—á–∞–µ—Ç market sentiment, top news, forecast, risk metrics.",
    resultDesc: "–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏, –∞ –Ω–µ –∫–æ–ø–∏–ø–∞—Å—Ç."
  },
];

const testimonials = [
  {
    name: "–ê–Ω–¥—Ä–µ–π, –≤–ª–∞–¥–µ–ª–µ—Ü –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞",
    text: "–ù–∏–∫–∏—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ª–∏–¥–æ–≤ —á–µ—Ä–µ–∑ Telegram –∏ CRM –∑–∞ 2 –¥–Ω—è. –°—ç–∫–æ–Ω–æ–º–∏–ª–∏ 15 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é.",
    avatar: "/Andrew.webp",
    companyLogo: "/Com1 (2).png",
    rating: 5,
  },
  {
    name: "–ú–∞—Ä–∏—è, SaaS –ø—Ä–æ–µ–∫—Ç",
    text: "–ü–æ—Å–ª–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å e-mail —Ç—Ä–∏–∞–∂–µ–º –º—ã —É–±—Ä–∞–ª–∏ 80% —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
    avatar: "/marija.webp",
    companyLogo: "/Com1 (1).png",
    rating: 5,
  },
  {
    name: "–í–ª–∞–¥–∏–º–∏—Ä, eCommerce",
    text: "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ AI + n8n –ø–æ–∑–≤–æ–ª–∏–ª–æ –Ω–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É –Ω–∞ 20%. –í—Å—ë –±—ã—Å—Ç—Ä–æ –∏ —á—ë—Ç–∫–æ!",
    avatar: "/Vladimir.webp",
    companyLogo: "/Com1 (3).png",
    rating: 5,
  },
];

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é YouTube
function getYoutubeThumbnail(url: string) {
  const match = url.match(/embed\/([a-zA-Z0-9_-]+)/);
  return match ? `https://img.youtube.com/vi/${match[1]}/hqdefault.jpg` : '';
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ
function VideoModal({ open, onClose, videoUrl }: { open: any, onClose: any, videoUrl: any }) {
  if (!open) return null;
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-80">
      <div className="relative w-full max-w-3xl aspect-video flex items-center justify-center">
        <button onClick={onClose} className="absolute top-2 right-2 z-10 bg-black/60 rounded-full p-2 text-white hover:bg-black/80 transition-all">
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/></svg>
        </button>
        <iframe
          src={videoUrl.replace('autoplay=1', 'autoplay=0').replace('mute=1', 'mute=0').replace('controls=0', 'controls=1')}
          allow="autoplay; encrypted-media"
          allowFullScreen
          className="w-full h-full rounded-xl bg-black"
          title="Case Video"
        />
      </div>
    </div>
  );
}

export default function Home() {
  const t = useTranslations();
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedPackage, setSelectedPackage] = useState<string | null>(null);
  const swiperRef = useRef<any>(null);
  const [videoModalOpen, setVideoModalOpen] = useState(false);
  const [videoUrl, setVideoUrl] = useState("");

  // Smooth scroll –∫ –∫–µ–π—Å–∞–º
  const scrollToCases = () => {
    const el = document.getElementById("cases");
    if (el) {
      el.scrollIntoView({ behavior: "smooth" });
    }
  };

  return (
    <>
      {/* HERO BLOCK */}
      <motion.section
        initial={{ opacity: 0, y: 40 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8, ease: "easeOut" }}
        className="w-full bg-[#0e0e1c] min-h-[60vh] flex flex-col justify-center items-center py-16 sm:py-10 px-2 sm:px-1"
      >
        <div className="max-w-4xl mx-auto flex flex-col items-center text-center gap-6">
          <h1 className="text-3xl sm:text-4xl md:text-6xl font-extrabold leading-tight drop-shadow-[0_0_8px_rgba(162,89,247,0.25)]" style={{ fontFamily: 'Inter, Poppins, Arial, sans-serif' }}>
            {t('hero.title')}
            <div className="mt-[-10px]">
              <span className="text-base sm:text-lg text-[#a259f7] font-semibold drop-shadow-[0_0_4px_rgba(162,89,247,0.18)]">{t('hero.subtitle')}</span>
            </div>
          </h1>
          <p className="text-base sm:text-lg text-gray-300 font-medium">
            {t('hero.description')}
          </p>
          <div className="flex flex-col sm:flex-row gap-3 sm:gap-4 mt-4 w-full max-w-xs mx-auto">
            <a
              href="#order"
              className="button-gradient button-gradient-pulse rounded-full px-4 py-2 sm:px-6 sm:py-3 font-bold text-white text-base shadow focus:outline-none drop-shadow-[0_0_6px_rgba(162,89,247,0.18)] w-full"
              onClick={e => {e.preventDefault(); document.getElementById('order')?.scrollIntoView({behavior:'smooth'});}}
            >
              {t('hero.button.get')}
            </a>
            <button
              className="button-secondary rounded-full px-4 py-2 sm:px-6 sm:py-3 font-bold text-white text-base focus:outline-none w-full"
              onClick={scrollToCases}
            >
              {t('hero.button.examples')}
            </button>
          </div>
          <div className="text-xs sm:text-sm text-gray-400 mt-3">
            {t('hero.stats')}
          </div>
        </div>
      </motion.section>

      {/* How I Work Section */}
      <section className="w-full max-w-xl mx-auto py-10 sm:py-6 px-2 sm:px-1 flex flex-col items-center">
        <motion.h2
          initial={{ opacity: 0, y: 40 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true, amount: 0.7 }}
          transition={{ duration: 0.7 }}
          className="text-3xl sm:text-4xl font-bold text-center mb-8 sm:mb-12 ai-glow"
        >
          {t('how.title')}
        </motion.h2>
        <div className="flex flex-col items-center w-full gap-0 relative">
          {/* –®–∞–≥ 1 */}
          <motion.div
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, amount: 0.7 }}
            transition={{ duration: 0.7, delay: 0 }}
            className="flex flex-row gap-3 sm:gap-6 items-start w-full mb-2 relative group cursor-pointer transition-colors"
          >
            <div className="text-3xl sm:text-4xl font-extrabold text-gradient bg-gradient-to-br from-[#a259f7] to-[#4fc3f7] text-transparent bg-clip-text min-w-[28px] sm:min-w-[36px] text-center">1</div>
            <div className="flex-1">
              <div className="flex items-center gap-2 text-base sm:text-lg font-bold text-white mb-1 group-hover:text-white/90 transition-colors">
                <span className="inline-block align-middle text-[15px] sm:text-[16px] drop-shadow-[0_0_3px_#a259f7] transition-transform group-hover:scale-110">üîç</span>
                {t('how.step1.title')}
              </div>
              <div className="text-gray-300 text-sm sm:text-base">{t('how.step1.desc')}</div>
            </div>
          </motion.div>
          {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ */}
          <div className="w-px h-6 sm:h-8 bg-gradient-to-b from-[#a259f7] to-[#4fc3f7] opacity-20 mx-auto" />
          {/* –®–∞–≥ 2 */}
          <motion.div
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, amount: 0.7 }}
            transition={{ duration: 0.7, delay: 0.1 }}
            className="flex flex-row gap-3 sm:gap-6 items-start w-full mb-2 relative group cursor-pointer transition-colors"
          >
            <div className="text-3xl sm:text-4xl font-extrabold text-gradient bg-gradient-to-br from-[#a259f7] to-[#4fc3f7] text-transparent bg-clip-text min-w-[28px] sm:min-w-[36px] text-center">2</div>
            <div className="flex-1">
              <div className="flex items-center gap-2 text-base sm:text-lg font-bold text-white mb-1 group-hover:text-white/90 transition-colors">
                <span className="inline-block align-middle text-[15px] sm:text-[16px] drop-shadow-[0_0_3px_#4fc3f7] transition-transform group-hover:scale-110">‚öôÔ∏è</span>
                {t('how.step2.title')}
              </div>
              <div className="text-gray-300 text-sm sm:text-base">{t('how.step2.desc')}</div>
            </div>
          </motion.div>
          {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ */}
          <div className="w-px h-6 sm:h-8 bg-gradient-to-b from-[#a259f7] to-[#4fc3f7] opacity-20 mx-auto" />
          {/* –®–∞–≥ 3 */}
          <motion.div
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, amount: 0.7 }}
            transition={{ duration: 0.7, delay: 0.2 }}
            className="flex flex-row gap-3 sm:gap-6 items-start w-full relative group cursor-pointer transition-colors"
          >
            <div className="text-3xl sm:text-4xl font-extrabold text-gradient bg-gradient-to-br from-[#a259f7] to-[#4fc3f7] text-transparent bg-clip-text min-w-[28px] sm:min-w-[36px] text-center">3</div>
            <div className="flex-1">
              <div className="flex items-center gap-2 text-base sm:text-lg font-bold text-white mb-1 group-hover:text-white/90 transition-colors">
                <span className="inline-block align-middle text-[15px] sm:text-[16px] drop-shadow-[0_0_3px_#a259f7] transition-transform group-hover:scale-110">üöÄ</span>
                {t('how.step3.title')}
              </div>
              <div className="text-gray-300 text-sm sm:text-base">{t('how.step3.desc')}</div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Pricing Section */}
      <section id="order" className="w-full max-w-6xl mx-auto py-12 px-2">
        <h2 className="text-2xl sm:text-3xl font-bold mb-8 text-center">{t('pricing.title')}</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {/* –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ / Fast setup */}
          <motion.div
            key={Math.random()}
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: false, amount: 0.4 }}
            transition={{ duration: 0.7, delay: 0 }}
            className="bg-[#15152a] rounded-xl min-h-[700px] flex flex-col justify-between py-8 px-8 shadow-lg border border-[#4fc3f7] text-left gap-4"
            style={{boxShadow:'0 0 0 2px #4fc3f7, 0 8px 32px 0 #000a'}}
          >
            <div className="flex flex-col gap-4">
              <div>
                <div className="text-2xl font-bold flex flex-col items-start text-white">
                  <span>üéØ {t('pricing.fast.name')}</span>
                  <span className="block text-base font-normal text-gray-400 mt-1">({t('pricing.fast.desc')})</span>
                </div>
                <div className="text-3xl font-bold text-white mt-4">{t('pricing.fast.price')}</div>
              </div>
              <ul className="text-sm space-y-2 text-left flex flex-col items-start">
                {t.raw('pricing.fast.features').map((feature: string, idx: number) => (
                  <li key={idx} className="flex items-center gap-3">
                    <FileText size={18} className="text-[#a259f7]" />
                    <span>{feature}</span>
                  </li>
                ))}
              </ul>
              <div className="w-full flex items-center gap-2 px-2 py-2 rounded-lg bg-gradient-to-r from-[#a259f7]/20 to-[#4fc3f7]/10 border border-[#a259f7]/30">
                <FileText size={20} className="text-gradient bg-gradient-to-r from-[#a259f7] to-[#4fc3f7] text-transparent bg-clip-text font-bold" />
                <span className="text-sm font-semibold text-white">{t('pricing.fast.bonus')}</span>
              </div>
            </div>
            <div className="mt-auto w-full flex flex-col gap-2">
              <button
                className="w-full button-gradient rounded-lg px-6 py-3 font-bold text-base text-white shadow-lg focus:outline-none transition-all hover:scale-105 text-center"
                style={{background:'linear-gradient(90deg,#a259f7,#4fc3f7)',filter:'brightness(1.1)'}}
                onClick={() => { setSelectedPackage(t('pricing.fast.name')); setModalOpen(true); }}
              >
                {t('pricing.fast.button')}
              </button>
              <div className="text-xs text-center text-gray-400">üöÄ {t('pricing.fast.note')}</div>
            </div>
          </motion.div>
          {/* –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è + AI / Automation + AI */}
          <motion.div
            key={Math.random()}
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: false, amount: 0.4 }}
            transition={{ duration: 0.7, delay: 0.15 }}
            className="bg-[#15152a] rounded-xl min-h-[700px] flex flex-col justify-between py-8 px-8 shadow-lg border border-[#4fc3f7] text-left gap-4"
            style={{boxShadow:'0 0 0 2px #4fc3f7, 0 8px 32px 0 #000a'}}
          >
            <div className="flex flex-col gap-4">
              <div>
                <div className="text-2xl font-bold flex flex-col items-start text-white">
                  <span>üöÄ {t('pricing.ai.name')}</span>
                  <span className="block text-base font-normal text-gray-400 mt-1">({t('pricing.ai.desc')})</span>
                </div>
                <div className="text-3xl font-bold text-white mt-4">{t('pricing.ai.price')}</div>
              </div>
              <ul className="text-sm space-y-2 text-left flex flex-col items-start">
                {t.raw('pricing.ai.features').map((feature: string, idx: number) => (
                  <li key={idx} className="flex items-center gap-3">
                    <Zap size={18} className="text-[#a259f7]" />
                    <span>{feature}</span>
                  </li>
                ))}
              </ul>
              <div className="w-full flex items-center gap-2 px-2 py-2 rounded-lg bg-gradient-to-r from-[#a259f7]/20 to-[#4fc3f7]/10 border border-[#a259f7]/30">
                <FileText size={20} className="text-gradient bg-gradient-to-r from-[#a259f7] to-[#4fc3f7] text-transparent bg-clip-text font-bold" />
                <span className="text-sm font-semibold text-white">{t('pricing.ai.bonus')}</span>
              </div>
            </div>
            <div className="mt-auto w-full flex flex-col gap-2">
              <button
                className="w-full button-gradient rounded-lg px-6 py-3 font-bold text-base text-white shadow-lg focus:outline-none transition-all hover:scale-105 text-center"
                style={{background:'linear-gradient(90deg,#a259f7,#4fc3f7)',filter:'brightness(1.1)'}}
                onClick={() => { setSelectedPackage(t('pricing.ai.name')); setModalOpen(true); }}
              >
                {t('pricing.ai.button')}
              </button>
              <div className="text-xs text-center text-gray-400">üöÄ {t('pricing.ai.note')}</div>
            </div>
          </motion.div>
          {/* –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∫–ª—é—á / Full automation */}
          <motion.div
            key={Math.random()}
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: false, amount: 0.4 }}
            transition={{ duration: 0.7, delay: 0.3 }}
            className="bg-[#15152a] rounded-xl min-h-[700px] flex flex-col justify-between py-8 px-8 shadow-lg border border-[#4fc3f7] text-left gap-4"
            style={{boxShadow:'0 0 0 2px #4fc3f7, 0 8px 32px 0 #000a'}}
          >
            <div className="flex flex-col gap-4">
              <div>
                <div className="text-2xl font-bold flex flex-col items-start text-white">
                  <span>üëë {t('pricing.full.name')}</span>
                  <span className="block text-base font-normal text-gray-400 mt-1">({t('pricing.full.desc')})</span>
                </div>
                <div className="text-3xl font-bold text-white mt-4">{t('pricing.full.price')}</div>
              </div>
              <ul className="text-sm space-y-2 text-left flex flex-col items-start">
                {t.raw('pricing.full.features').map((feature: string, idx: number) => (
                  <li key={idx} className="flex items-center gap-3">
                    <Settings size={18} className="text-[#a259f7]" />
                    <span>{feature}</span>
                  </li>
                ))}
              </ul>
              <div className="w-full flex items-center gap-2 px-2 py-2 rounded-lg bg-gradient-to-r from-[#a259f7]/20 to-[#4fc3f7]/10 border border-[#a259f7]/30">
                <FileText size={20} className="text-gradient bg-gradient-to-r from-[#a259f7] to-[#4fc3f7] text-transparent bg-clip-text font-bold" />
                <span className="text-sm font-semibold text-white">{t('pricing.full.bonus')}</span>
              </div>
            </div>
            <div className="mt-auto w-full flex flex-col gap-2">
              <button
                className="w-full button-gradient rounded-lg px-6 py-3 font-bold text-base text-white shadow-lg focus:outline-none transition-all hover:scale-105 text-center"
                style={{background:'linear-gradient(90deg,#a259f7,#4fc3f7)',filter:'brightness(1.1)'}}
                onClick={() => { setSelectedPackage(t('pricing.full.name')); setModalOpen(true); }}
              >
                {t('pricing.full.button')}
              </button>
              <div className="text-xs text-center text-gray-400">üöÄ {t('pricing.full.note')}</div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* About Section */}
      <motion.section
        initial={{ opacity: 0, y: 40 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8, ease: "easeOut" }}
        className="w-full max-w-3xl mx-auto py-12 px-2 flex flex-col items-center gap-6"
      >
        <div className="w-28 h-28 rounded-full overflow-hidden bg-gradient-to-br from-[#a259f7] to-[#4fc3f7] flex items-center justify-center shadow-lg">
          <img
            src="https://api.dicebear.com/7.x/identicon/svg?seed=nikita"
            alt="–ù–∏–∫–∏—Ç–∞ ‚Äî AI –∏–Ω–∂–µ–Ω–µ—Ä"
            className="w-24 h-24 rounded-full object-cover border-4 border-[#0e0e1c]"
          />
        </div>
        <div className="text-2xl font-bold text-white text-center">
          {t('about.main')}
        </div>
        <div className="text-md text-gray-300 text-center font-medium max-w-xl">
          <span className="font-bold bg-gradient-to-r from-[#a259f7] to-[#4fc3f7] text-transparent bg-clip-text">{t('about.highlight')}</span> {t('about.highlightText')}<br/>
          {t('about.desc')}
        </div>
      </motion.section>

      {/* Testimonials Section */}
      <motion.section id="testimonials"
        initial={{ opacity: 0, y: 40 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8, ease: "easeOut" }}
        className="w-full max-w-4xl mx-auto px-4 py-16"
      >
        <h2 className="text-3xl font-bold text-center mb-2 text-white">{t('testimonials.title')}</h2>
        <div className="text-gray-400 text-center mb-4">{t('testimonials.subtitle')}</div>
        <Swiper
          modules={[Navigation, Pagination, Autoplay]}
          navigation
          pagination={{ clickable: true }}
          autoplay={{ delay: 5000, disableOnInteraction: false }}
          spaceBetween={24}
          slidesPerView={1}
          breakpoints={{
            640: { slidesPerView: 1 },
            900: { slidesPerView: 2 },
            1280: { slidesPerView: 3 },
          }}
          className="w-full"
        >
          {t.raw('testimonials.list').map((testi: any, i: number) => (
            <SwiperSlide key={i} className="h-auto flex items-stretch">
              <div className={`rounded-xl testimonial-gradient testimonial-card p-6 flex flex-col items-center shadow-lg testimonial-glow transition-all h-full min-h-[420px]${i === 0 || i === 2 ? ' !min-h-[480px] !py-10' : ''}`}>
                <div className="flex items-center justify-center mb-3">
                  <span className="star">‚òÖ</span><span className="star">‚òÖ</span><span className="star">‚òÖ</span><span className="star">‚òÖ</span><span className="star">‚òÖ</span>
                </div>
                <div className="w-20 h-20 mb-4 mx-auto flex items-center justify-center">
                  {i % 2 === 0 ? (
                    <svg width="80" height="80" viewBox="0 0 80 80">
                      <circle cx="40" cy="40" r="36" fill="#a259f7" stroke="#4fc3f7" strokeWidth="4" />
                      <circle cx="40" cy="40" r="16" fill="#fff" opacity="0.18" />
                    </svg>
                  ) : (
                    <svg width="80" height="80" viewBox="0 0 80 80">
                      <rect x="8" y="8" width="64" height="64" rx="16" fill="#4fc3f7" stroke="#a259f7" strokeWidth="4" />
                      <rect x="28" y="28" width="24" height="24" rx="6" fill="#fff" opacity="0.18" />
                    </svg>
                  )}
                </div>
                <div className="quote-mark mb-2">"</div>
                <div className={`text-center text-gray-200 text-md mb-2${i === 2 ? ' mt-4' : ''}`}>{testi.text}</div>
                <div className="text-center text-xl font-bold text-white mt-2">{testi.name}</div>
                {testi.company && (
                  <div className="flex justify-center mt-3">
                    <div className="bg-white/10 rounded-xl p-2 shadow-md flex items-center justify-center w-9 h-9">
                      <img src={`/${testi.company}`} alt="Company Logo" className="w-7 h-7 object-contain" />
                    </div>
                  </div>
                )}
              </div>
            </SwiperSlide>
          ))}
        </Swiper>
        <div className="flex justify-center mt-8">
          <a href="#order" className="button-gradient button-gradient-pulse rounded-full px-10 py-5 font-bold text-2xl text-white shadow-xl focus:outline-none transition-all hover:scale-105" onClick={e => {e.preventDefault(); document.getElementById('order')?.scrollIntoView({behavior:'smooth'});}}>{t('testimonials.button')}</a>
        </div>
      </motion.section>

      {/* Bonus Section */}
      <section id="bonus" className="w-full max-w-2xl mx-auto py-12 px-2 flex flex-col items-center gap-4">
        <div className="text-2xl font-bold text-center mb-2">{t('bonus.title')}</div>
        <div className="text-lg text-center font-semibold mb-2 bg-gradient-to-r from-[#a259f7] via-[#4fc3f7] to-[#a259f7] text-transparent bg-clip-text drop-shadow-[0_0_4px_rgba(162,89,247,0.3)]">
          {t('bonus.desc')}
        </div>
        <div className="text-sm text-center text-gray-400">
          {t('bonus.support')} <br />
          <span className="text-xs text-gray-500">{t('bonus.support_note')}</span>
        </div>
      </section>

      {/* Storytelling Scroll Journey */}
      <section id="cases" className="w-full bg-[#0e0e1c] py-24 px-2">
        <h2 className="text-2xl sm:text-3xl font-bold mb-12 text-center text-white ai-glow">{t('projects.title')}</h2>
        {t.raw('projects.list').map((story: any, idx: number) => (
          <motion.div
            key={idx}
            initial={{ opacity: 0, x: idx % 2 === 0 ? -80 : 80 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true, amount: 0.3 }}
            transition={{ duration: 0.7, delay: idx * 0.15, type: 'spring', stiffness: 60, damping: 18 }}
            className="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-0 relative rounded-3xl overflow-hidden shadow-2xl mb-16 group"
          >
            {/* –ü—Ä–æ–±–ª–µ–º–∞ */}
            <div className="relative bg-[#181830] p-8 flex flex-col items-start min-h-[340px] border-r-0 md:border-r border-[#4fc3f7]/30 group hover:shadow-[0_0_32px_4px_rgba(162,89,247,0.15)] transition-all overflow-hidden">
              {/* –ú–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ —Ö–∞–æ—Ç–∏—á–Ω–æ */}
              {[...Array(14)].map((_, i) => {
                const shapes = [
                  <circle cx="12" cy="12" r="10" stroke="#a259f7" strokeWidth="2" />, // –∫—Ä—É–≥
                  <rect x="4" y="4" width="16" height="16" rx="4" stroke="#4fc3f7" strokeWidth="2" />, // –∫–≤–∞–¥—Ä–∞—Ç
                  <polygon points="12,2 22,22 2,22" stroke="#fff" strokeWidth="2" /> // —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                ];
                const shape = shapes[i % 3];
                const size = 12 + Math.floor(Math.random() * 16); // 12-28px
                const left = Math.random() * 90;
                const top = Math.random() * 90;
                const opacity = 0.08 + Math.random() * 0.18;
                const blur = 1 + Math.random() * 2.5;
                return (
                  <svg key={i} className="absolute" style={{left: `${left}%`, top: `${top}%`, opacity, filter: `blur(${blur}px)`}} width={size} height={size} viewBox="0 0 24 24" fill="none">{shape}</svg>
                );
              })}
              <div className="flex items-center gap-2 mb-2 text-[#fbbf24] text-xs font-semibold">
                <AlertTriangle size={20} className="text-[#fbbf24]" /> <span>Step 1: Problem</span>
              </div>
              <div className="font-bold text-2xl text-white mb-4">
                <span className="ai-glow">{t('projects.problemLabel')}</span> {story.problem}
              </div>
            </div>
            {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è glowing –ª–∏–Ω–∏—è */}
            <div className="hidden md:block absolute left-1/3 top-8 bottom-8 w-[2px] bg-gradient-to-b from-[#a259f7] via-[#4fc3f7] to-transparent blur-[2px] opacity-80 z-10" />
            {/* –†–µ—à–µ–Ω–∏–µ */}
            <div className="relative bg-[#15152a] p-8 flex flex-col items-center min-h-[340px] border-x-0 md:border-x border-[#a259f7]/30 group hover:shadow-[0_0_32px_4px_rgba(76,195,247,0.15)] transition-all overflow-hidden">
              {/* –ú–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ —Ö–∞–æ—Ç–∏—á–Ω–æ */}
              {[...Array(16)].map((_, i) => {
                const shapes = [
                  <circle cx="12" cy="12" r="10" stroke="#a259f7" strokeWidth="2" />, // –∫—Ä—É–≥
                  <rect x="4" y="4" width="16" height="16" rx="4" stroke="#4fc3f7" strokeWidth="2" />, // –∫–≤–∞–¥—Ä–∞—Ç
                  <polygon points="12,2 22,22 2,22" stroke="#fff" strokeWidth="2" /> // —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                ];
                const shape = shapes[i % 3];
                const size = 12 + Math.floor(Math.random() * 16); // 12-28px
                const left = Math.random() * 90;
                const top = Math.random() * 90;
                const opacity = 0.08 + Math.random() * 0.18;
                const blur = 1 + Math.random() * 2.5;
                return (
                  <svg key={i} className="absolute" style={{left: `${left}%`, top: `${top}%`, opacity, filter: `blur(${blur}px)`}} width={size} height={size} viewBox="0 0 24 24" fill="none">{shape}</svg>
                );
              })}
              <div className="flex items-center gap-2 mb-2 text-[#4fc3f7] text-xs font-semibold">
                <Zap size={18} /> <span>Step 2: Solution</span>
              </div>
              <div className="w-full rounded-xl border-2 border-gradient shadow-lg overflow-hidden mb-4 transition-all group-hover:shadow-[0_0_32px_8px_rgba(76,195,247,0.25)] cursor-pointer relative" onClick={() => { if(story.solutionVideo){ setVideoUrl(story.solutionVideo.replace('autoplay=1', 'autoplay=0').replace('mute=1', 'mute=0').replace('controls=0', 'controls=1')); setVideoModalOpen(true); } }} title="–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –≤ –±–æ–ª—å—à–æ–º –æ–∫–Ω–µ">
                <img src={getYoutubeThumbnail(story.solutionVideo)} alt="YouTube preview" className="w-full aspect-video object-cover rounded-xl" />
                <div className="absolute inset-0 flex items-center justify-center bg-black/30 opacity-0 hover:opacity-100 transition-opacity cursor-pointer">
                  <svg width="64" height="64" viewBox="0 0 24 24" fill="white" className="drop-shadow-lg"><polygon points="5,3 19,12 5,21"/></svg>
                </div>
              </div>
              <div className="w-full flex justify-center mb-2">
                <span className="ai-glow text-lg font-bold text-[#4fc3f7] text-center">{t('projects.solutionLabel')}</span>
              </div>
              <div className="text-md text-gray-300 w-full text-left">
                {story.solutionText.includes('‚úÖ') ? (
                  <ul className="space-y-0.5">
                    {story.solutionText.split(/\s*‚úÖ/).filter(Boolean).map((line: string, i: number) => (
                      <li key={i} className="flex items-start gap-1 text-[15px] leading-tight">
                        <span className="text-green-400 text-base mt-0.5">‚úÖ</span>
                        <span>{line.trim()}</span>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <span>{story.solutionText}</span>
                )}
              </div>
            </div>
            {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è glowing –ª–∏–Ω–∏—è */}
            <div className="hidden md:block absolute left-2/3 top-8 bottom-8 w-[2px] bg-gradient-to-b from-[#4fc3f7] via-[#a259f7] to-transparent blur-[2px] opacity-80 z-10" />
            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
            <div className="relative bg-[#181830] p-8 flex flex-col items-start min-h-[340px] border-l-0 md:border-l border-[#a259f7]/30 group hover:shadow-[0_0_32px_4px_rgba(162,89,247,0.15)] transition-all overflow-hidden">
              {/* –ú–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ —Ö–∞–æ—Ç–∏—á–Ω–æ */}
              {[...Array(12)].map((_, i) => {
                const shapes = [
                  <circle cx="12" cy="12" r="10" stroke="#4fc3f7" strokeWidth="2" />, // –∫—Ä—É–≥
                  <rect x="4" y="4" width="16" height="16" rx="4" stroke="#a259f7" strokeWidth="2" />, // –∫–≤–∞–¥—Ä–∞—Ç
                  <polygon points="12,2 22,22 2,22" stroke="#fff" strokeWidth="2" /> // —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                ];
                const shape = shapes[i % 3];
                const size = 12 + Math.floor(Math.random() * 16); // 12-28px
                const left = Math.random() * 90;
                const top = Math.random() * 90;
                const opacity = 0.08 + Math.random() * 0.18;
                const blur = 1 + Math.random() * 2.5;
                return (
                  <svg key={i} className="absolute" style={{left: `${left}%`, top: `${top}%`, opacity, filter: `blur(${blur}px)`}} width={size} height={size} viewBox="0 0 24 24" fill="none">{shape}</svg>
                );
              })}
              <div className="flex items-center gap-2 mb-2 text-[#4ade80] text-xs font-semibold">
                <Check size={20} className="text-[#4ade80]" /> <span>Step 3: Result</span>
              </div>
              <div className="font-bold text-xl text-white mb-2">
                <span className="ai-glow">{t('projects.resultLabel')}</span> {story.result}
              </div>
              <div className="text-sm text-gray-400">{story.resultDesc}</div>
            </div>
          </motion.div>
        ))}
      </section>

      {/* FAQ Section */}
      <section className="w-full max-w-2xl mx-auto py-20 px-4 flex flex-col items-center">
        <h2 className="text-3xl sm:text-4xl font-bold text-center mb-10 ai-glow">{t('faq.title')}</h2>
        <div className="flex flex-col gap-8 w-full">
          {t.raw('faq.list').map((item: any, idx: number) => (
            <div key={idx}>
              <div className="text-lg font-bold text-white mb-2">{item.q}</div>
              <div className="text-base text-gray-300 flex items-start"><span className="mr-2">üí¨</span>{item.a}</div>
            </div>
          ))}
        </div>
      </section>

      {/* Contacts Section */}
      <section id="contacts" className="w-full bg-[#15152a] py-16 px-4 flex flex-col items-center mt-12 rounded-3xl shadow-2xl border border-[#23234a]">
        <h2 className="text-3xl sm:text-4xl font-bold text-center mb-4 ai-glow" style={{textShadow:'0 0 12px #a259f7, 0 0 32px #4fc3f7'}}>{t('contacts.title')}</h2>
        <div className="text-lg text-gray-300 text-center mb-8" style={{textShadow:'0 0 6px #23234a'}}>{t('contacts.desc')}</div>
        <div className="flex flex-col sm:flex-row gap-6 w-full max-w-2xl justify-center items-center">
          {/* Discord */}
          <a href="https://discord.com/users/your_discord_id" target="_blank" rel="noopener noreferrer" className="flex flex-col items-center w-36 group">
            <span className="flex items-center justify-center rounded-full w-24 h-24 bg-gradient-to-br from-[#a259f7] to-[#4fc3f7] shadow-lg transition-all group-hover:shadow-[0_0_24px_8px_rgba(162,89,247,0.5)]">
              <img src="/Discord-logo-01.png" alt="Discord" width="48" height="48" className="drop-shadow-[0_0_8px_#a259f7]" />
            </span>
            <span className="mt-3 text-white font-semibold text-base text-center drop-shadow-[0_0_6px_#a259f7]">{t('contacts.discord')}<br/><span className="text-xs text-gray-400 font-normal">{t('contacts.discord_user')}</span></span>
          </a>
          {/* Telegram */}
          <a href="https://t.me/Olegh_0" target="_blank" rel="noopener noreferrer" className="flex flex-col items-center w-36 group">
            <span className="flex items-center justify-center rounded-full w-24 h-24 bg-gradient-to-br from-[#4fc3f7] to-[#a259f7] shadow-lg transition-all group-hover:shadow-[0_0_24px_8px_rgba(79,195,247,0.5)]">
              <img src="/Telegram_logo.svg.webp" alt="Telegram" width="48" height="48" className="drop-shadow-[0_0_8px_#4fc3f7]" />
            </span>
            <span className="mt-3 text-white font-semibold text-base text-center drop-shadow-[0_0_6px_#4fc3f7]">{t('contacts.telegram')}<br/><span className="text-xs text-gray-400 font-normal">{t('contacts.telegram_user')}</span></span>
          </a>
          {/* WhatsApp */}
          <a href="https://wa.me/385953705606" target="_blank" rel="noopener noreferrer" className="flex flex-col items-center w-36 group">
            <span className="flex items-center justify-center rounded-full w-24 h-24 bg-gradient-to-br from-[#25d366] to-[#4fc3f7] shadow-lg transition-all group-hover:shadow-[0_0_24px_8px_rgba(37,211,102,0.5)]">
              <img src="/whatsapp-icon.svg" alt="WhatsApp" width="48" height="48" className="drop-shadow-[0_0_8px_#25d366]" />
            </span>
            <span className="mt-3 text-white font-semibold text-base text-center drop-shadow-[0_0_6px_#25d366]">{t('contacts.whatsapp')}<br/><span className="text-xs text-gray-400 font-normal">{t('contacts.whatsapp_user')}</span></span>
          </a>
          {/* Email */}
          <a href="mailto:Lazarievsmm@gmail.com" className="flex flex-col items-center w-36 group">
            <span className="flex items-center justify-center rounded-full w-24 h-24 bg-gradient-to-br from-[#a259f7] to-[#4fc3f7] shadow-lg transition-all group-hover:shadow-[0_0_24px_8px_rgba(162,89,247,0.5)]">
              <img src="/Gmail_icon.png" alt="Email" width="48" height="48" className="drop-shadow-[0_0_8px_#a259f7]" />
            </span>
            <span className="mt-3 text-white font-semibold text-base text-center drop-shadow-[0_0_6px_#a259f7]">{t('contacts.email')}<br/><span className="text-xs text-gray-400 font-normal">{t('contacts.email_user')}</span></span>
          </a>
        </div>
      </section>

      {/* Footer */}
      <footer className="w-full py-8 flex flex-col items-center gap-4 text-gray-500">
        <div className="text-sm">Copyright ¬© Nikita 2025</div>
        <div className="flex gap-6">
          <a href="https://t.me/Olegh_0" target="_blank" rel="noopener noreferrer" aria-label="Telegram">
            <svg width="28" height="28" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24"><path d="M22 3L2 12l5.5 2 2 5.5L22 3z"/><path d="M22 3L8.5 14.5"/></svg>
          </a>
          <a href="mailto:Lazarievsmm@gmail.com" target="_blank" rel="noopener noreferrer" aria-label="Email">
            <svg width="28" height="28" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24"><rect x="3" y="5" width="18" height="14" rx="2"/><path d="M3 7l9 6 9-6"/></svg>
          </a>
          <a href="https://linkedin.com/in/yourprofile" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn">
            <svg width="28" height="28" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24"><rect x="2" y="3" width="20" height="18" rx="2"/><path d="M16 8a4 4 0 0 1 4 4v5m-8-5v5m-4-5v5m-2-8h.01"/></svg>
          </a>
        </div>
      </footer>

      {/* Modal Order Form */}
      <FuturisticOrderModal open={modalOpen} onClose={() => setModalOpen(false)} selectedPackage={selectedPackage} />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ */}
      <VideoModal open={videoModalOpen} onClose={() => setVideoModalOpen(false)} videoUrl={videoUrl} />
    </>
  );
}
